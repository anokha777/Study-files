docker --version
docker version
docker-compose --version
docker-machine --version
docker

# To install docker command completion on tab
1. Install Homebrew
2. run - brew install bash-completion
3. run - 
etc=/Applications/Docker.app/Contents/Resources/etc
ln -s $etc/docker.bash-completion $(brew --prefix)/etc/bash_completion.d/docker
ln -s $etc/docker-machine.bash-completion $(brew --prefix)/etc/bash_completion.d/docker-machine
ln -s $etc/docker-compose.bash-completion $(brew --prefix)/etc/bash_completion.d/docker-compose

docker info
docker container run --publish 80:80 nginx (to run container for nginx image (80:80 => hostPort:containerPort))
docker container run --publish 80:80 --detach nginx (to run in daemon mode - it does same as in above command)
docker container ls (to list all running containers (old way- docker ps))
docker container stop f7954a405621 (to stop container by it's id)
docker container start 6861f7037c37 (to start container by it's id)
docker container ls -a (to list all running/stopped containers (old way- docker ps -a))

**************************run vs start************************************
docker container run (it always start a new container)
docker container start (it starts stopped container)
**************************************************************************

docker container run --publish 80:80 --detach --name anokhaweb nginx (to run container for nginx image with container name anokhaweb)
# now go to browse and access localhost
docker container logs anokhaweb (to see the log of container by name (here anokhaweb is container name))
docker container top anokhaweb (to display the running process on container (here anokhaweb is container name))
docker container --help (to list down the available commands for container)
docker container rm eda8fd1f70c2 f7954a405621 (to remove the container/containers by its id (before deleting, stop the containers or use below command))
docker container rm -f eda8fd1f70c2 (to remove running container by its id)
ps aux (to see all running process)

********************* What is going on running container *************
docker container top (to list running process in running container)
docker container inspect (to see details of a container config)
docker container stats (to see performance stats for all containers)
# Try below scenario
docker container run -d --name anokha-nginx nginx (to create and start new container for nginx image)
docker container ps
docker container top anokha-nginx (to see running process)
docker container top anokha-mysql (to see running process)
docker container inspect anokha-mysql (to see container config metadata)
docker container inspect anokha-nginx (to see container config metadata)
docker container stats --help (to get 'stats' command help)
docker container stats (to see the container stats- cpu usages etc.) (to exit- control+c)
**********************************************************************

*********************** Getting a shell inside a container (Or go into a running container) **************
docker container run -it (to start new container interactively)
docker container exec -it (to run additional command in existing container)

docker container run -it --name my-nginx nginx bash (to get command prompt in container)
# Now we are inside we run commands or do config file change etc.
ls -al
# to get out of the shell - exit + hit Enter
docker container ls
docker container ls -a (see COMMAN COLUMN - the default command is bash)

# try above for ubuntu image container
docker container run -it --name my-ubuntu ubuntu (after running this, we will land to ubuntu shell. We do not require to provide additional command to land up into ubuntu shell, since ubuntu has bash as default command)
apt-get update (This is ubuntu command now we can run)
apt-get install -y curl (This is ubuntu command to install curl)
curl google.com (send request to google.com, to exit - exit + hit Enter)

docker container start -ai my-ubuntu (to restart container and bash into it)
# Once we exit from bash container gets stop

# How can we bash into a running container and comeout without stopping it?
docker container exec -it anokha-mysql bash (to bash into a running container, now we are in mysql container. We can do some admin config etc)
exit + Enter
docker container ls (mysql container still running)
**********************************************************************************************************

*********************** Working with alpine image ********************************************************
docker pull alpine (to pull alpine image, very less in size)
docker image ls
docker container run -it alpine bash (try to bash into alpine container by running this command. -- it will throw error. This prooves, we can only run into container which is present into it's image. So bash is not present in alpine)
docker container run -it alpine sh (to get into sh for alpine image container)
**********************************************************************************************************

***************************************** Docker Network *************************************************
docker container run -p 80:80 --name my-webhost -d nginx (to create and start nginx container)
docker container port my-webhost (to see, on which port nginx is running in container)
docker container inspect --format '{{ .NetworkSettings.IPAddress }}' my-webhost (To check what is the IP of running nginx in container)
ifconfig en0 (to check host ip - (for mac system) )

docker network ls (to list network)
docker network inspect bridge (to see which all containers are attached with this (bridge) network)
docker network create my_app_network (to create a new network)

docker container run -d --name new_nginx --network my_app_network nginx (to craete new container for nginx image and attach to a network)
docker network inspect my_app_network (to see new_nginx container is attached to my_app_network network)
docker network connect b7c40251774f 7hbjgyb8988 (docker network connect <network-id> <container-id or container-name>) -> (to connect a existing container to new network)
docker container inspect anokha-nginx (to see how many network attached to this (anokha-nginx) container)
docker network disconnect b7c40251774f anokha-nginx (docker network disconnect <network-id> <container-id or container-name>) -> (to disconnect a existing container from a network)
docker container inspect anokha-nginx (to see how many network attached to this (anokha-nginx) container)
**********************************************************************************************************

********************************** DNS *******************************************************************
docker network connect my_app_network anokha-nginx (to connect anokha-nginx container to my_app_network network)
# Now my_app_network network is connected with two containers 1. anokha-nginx 2. new_nginx
docker container exec -it new_nginx ping anokha-nginx (to ping from one container to another) -> ping is not available in nginx:latest, so use nginx:alpine image
**********************************************************************************************************


********************************************** Images ****************************************************
docker images (to list down the images)
docker image ls (to list down the images as above)
docker pull nginx (to pull image from image registry- hub.docker.com)
docker pull nginx:1.11.9 (to pull image from image registry by image versions)
docker history nginx:latest (to check image layer update/change timeline)
docker image inspect nginx (to see json metadata about image)

docker image tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG] (to assign one or more tag to an image)
docker image tag nginx:latest anokhadocker/nginx:1 (to assign a tag to image)
docker image ls (to list down the Images)
docker login
docker image push anokhadocker/nginx (push/publish image on docker registry)

docker image build -t nginx-with-html . (build image in current directory (using Docker file))
docker image ls (to listdown the images)
docker container run -p 80:80 --rm nginx-with-html (to run the above built image)
docker image tag nginx-with-html:latest anokhadocker/nginx-with-html:1.0.0 (to assign a tag to image)
docker image ls
docker image push anokhadocker/nginx-with-html (push/publish image on docker registry)
**********************************************************************************************************

*************************************** Volumes and Mounts ***********************************************
docker pull mysql (pull mysql image)
docker image inspect mysql (to see volumn in json output)
docker container run -d --name mysql-container -e MYSQL_ALLOW_EMPTY_PASSWORD=True  mysql (to start mysql container)
docker container ls
docker volume ls (to listdown all volumes)
docker volume inspect 1ca4fb839e63dd37b852721518e675b0ea8e1427d261599a4290d5bf5fb7b65c (to inspect volume by id)

**********************************************************************************************************
*********************************Push image to docker repository******************************************
1. sudo docker login
2. sudo docker build -t image-name:0.1 .
3. sudo docker images
4. sudo docker tag image-name:0.1 docker-userid/image-name:0.1
5. sudo docker push docker-userid/image-name:0.1
**********************************************************************************************************

*******************************Install docker-compose on on Amazon Linux AMI******************************
sudo yum update
sudo yum install -y docker
sudo usermod -a -G docker ec2-user
sudo curl -L https://github.com/docker/compose/releases/download/1.21.0/docker-compose-`uname -s`-`uname -m` | sudo tee /usr/local/bin/docker-compose > /dev/null
sudo chmod +x /usr/local/bin/docker-compose
sudo service docker start
sudo chkconfig docker on
***********************************************************************************************************

1. git log --oneline --graph --decorate --all (track commit so far)
2. git checkout -- README.md (revert a file)
3. git config --global alias.hist "log --oneline --graph --decorate --all" (create alias command)
4. git config --global --list
5. git hist (show logs for all commit)
6. git hist -- README.md (show logs for file)
7. git commit -am README.md (add + commit)
8. git mv source-file-or-folder destination-file-or-folder (to rename or move)
9. git rm file-or-name (remove from staging)
10. mv source-file-or-folder destination-file-or-folder (to rename or move)
11. git add -u (tell git for update)
12. git add -A (tell git for all type of modifications - create, update, delete)
13. git hist (created hist alias above)
14. git diff 116cf73 HEAD (compare one commit to HEAD)
15. git difftool (open diff tool)
16. git diff source-branch destination-branch
17. git branch -d branch-name (delete a branch)
18. git mergetool
19. git tag <tag-name> (create tag)
20. git tag list (listing tags)
21. git tag -d <tag-name> (delete tag name)
22. git tag -a v1.0 -m "Release 1.0" (tag with information)
23. git hist
24. git show v1.0 (show tag details)
25. git stash (stashing)
26. git stash list (lists stash)
27. git stash pop (apply stash)
28. git hist (show log)
29. git reset ce23j810 --soft (make HEAD to ce23j810, and keeps files in same area)
30. git reset gh67jk89 --mixed (make HEAD to gh67jk89, and removes files from staging area)
31. git reset kis89024 --hard (make HEAD to kis89024, and refresh everithing in Working directory and staging area)
32. git remote -v (show remote repo)
33. git remote rm origin

****************revert merged PR********************
34. git revert -m 1 <commit_id>
****************************************************

*************delete dummy images*********
1. docker images | grep none| tr -s ' ' | cut -d ' ' -f 3 | xargs -I {} docker rmi -f {}
2. docker system prune -a
3. docker system prune
4. docker history --no-trunc <Image ID> -- to know docker layer size
*****************************************

****************install docker on ec2******************
1. yum install docker 
2. systemctl start docker
3. du -sh <folder-name> -- get folder size
*******************************************************


